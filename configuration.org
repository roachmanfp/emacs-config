* Emacs Config

** Package Manager Configuration
Use-package is used to automatically download, install and configure parts of packages. This is much cleaner
than the standard method of installing packages in Emacs.

*Note:* use-package is built into Emacs >= 29. Configuration is here for suppporting older versions.

#+begin_src emacs-lisp
(require 'package)
(setq package-archives
      '(("gnu" . "https://elpa.gnu.org/packages/")
	("nongnu"."https://elpa.nongnu.org/nongnu/")
        ("melpa-stable" . "https://stable.melpa.org/packages/")))
(package-initialize)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (require 'use-package)
  (setq use-package-always-ensure t))
#+end_src

** Generic Configuration

Inhibit the startup message, and automatically enable view mode on read only files.
#+begin_src emacs-lisp
      (setq inhibit-startup-message t
	    view-read-only t)
#+end_src

Recursive minibuffers allow for invoking commands and functions within the minibuffer. I have yet to use
this myself, however given the nature of Emacs, it seems like it should be like this by default.
#+begin_src emacs-lisp
(setq enable-recursive-minibuffers t)
#+end_src

Save sessions by default.
#+begin_src emacs-lisp
 (desktop-save-mode 1)
 (save-place-mode 1)
#+end_src

Performance improvements for large files on older versions of Emacs
#+begin_src emacs-lisp
(when (version<= "27.1" emacs-version)
  (global-so-long-mode +1))
#+end_src

Auto pair brackets
#+begin_src emacs-lisp
(electric-pair-mode t)
#+end_src

Allow shortening of yes/no to y/n
#+begin_src emacs-lisp
(defalias 'yes-or-no #'y-or-n-p)
#+end_src
*** Searching
#+begin_src emacs-lisp
  (setq isearch-allow-scroll t) ; Scroll while searching
  (setq search-default-mode 'char-fold-to-regexp)  ; cafe = cafÃ©
#+end_src

*** Completion
Vertico adds some nicer looking, but still stock completion.
#+begin_src emacs-lisp
  (use-package vertico
  :init (vertico-mode +1))
  
;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init (savehist-mode +1))

;; Provides command annotations in addition to vertico
(use-package marginalia
  :init (marginalia-mode +1))
#+end_src

*** Inbuffer Text Completion
Provides an interface for completing functions and text.

#+begin_src emacs-lisp
  (use-package corfu
    ;; Optional customizations
    ;; :custom
    ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
    ;; (corfu-auto t)                 ;; Enable auto completion
    ;; (corfu-separator ?\s)          ;; Orderless field separator
    ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
    ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
    ;; (corfu-preview-current nil)    ;; Disable current candidate preview
    ;; (corfu-preselect 'prompt)      ;; Preselect the prompt
    ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
    ;; (corfu-scroll-margin 5)        ;; Use scroll margin

    ;; Enable Corfu only for certain modes.
    ;; :hook ((prog-mode . corfu-mode)
    ;;        (shell-mode . corfu-mode)
    ;;        (eshell-mode . corfu-mode))

    ;; Recommended: Enable Corfu globally.  This is recommended since Dabbrev can
    ;; be used globally (M-/).  See also the customization variable
    ;; `global-corfu-modes' to exclude certain modes.
    :init
    (global-corfu-mode))

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete)
#+end_src

*** Version Control
Git only for me, so of course you have to bring in magit as your git client.
#+begin_src emacs-lisp
  (use-package magit
  :bind (("C-x g" . magit)
         ("C-x C-g" . magit-status)))
#+end_src

Do diffs like a normal text editor

#+begin_src emacs-lisp
;; don't use a separate Frame for the control panel
(setq ediff-window-setup-function 'ediff-setup-windows-plain)
;; horizontal split is more readable
(setq ediff-split-window-function 'split-window-horizontally)

;; restore window config upon quitting ediff
(defvar ue-ediff-window-config nil "Window config before ediffing.")
(add-hook 'ediff-before-setup-hook
	  (lambda ()
	    (setq ue-ediff-window-config (current-window-configuration))))

(dolist (hook '(ediff-suspend-hook ediff-quit-hook))
  (add-hook hook
	    (lambda ()
	      (set-window-configuration ue-ediff-window-config))))

;; offer to clean up files from ediff sessions
(add-hook 'ediff-cleanup-hook (lambda () (ediff-janitor t nil)))
#+end_src

Highlight uncommitted changes in files
#+begin_src emacs-lisp
  (use-package diff-hl
    :config (diff-hl-flydiff-mode t)
    :hook ((prog-mode . turn-on-diff-hl-mode)
	   (vc-dir-mode . turn-on-diff-hl-mode)))
#+end_src

** Graphical / Appearance Configuration
Disabling some /delightful/ graphical defaults.
#+begin_src emacs-lisp
	(setq visible-bell t
	      use-file-dialog nil
	      use-dialog-box nil)

     (tool-bar-mode -1)
     (scroll-bar-mode -1)
     (horizontal-scroll-bar-mode -1)
     (menu-bar-mode -1)
     (tooltip-mode 1) ;
#+end_src

*** Scrolling
By default, Emacs has some fairly jumpy scrolling which I find dissorienting. This configures the scrolling to be
more smooth and like a conventional text editor.
#+begin_src emacs-lisp
  (setq scroll-conservatively 100000 ; Disables jumpy scrolling
	scroll-margin 7
	mouse-wheel-scroll-amount `(1 ((sshift) . 1)) ; One line per time mouse scrolling
	mouse-wheel-progressive-speed nil )
#+end_src

*** Window Switching
Ace window numbers each window when more than 2 are visible windows. I find it
nicer to use than slamming other-window.

#+begin_src emacs-lisp
(use-package ace-window
  :bind ("C-x o" . ace-window))
#+end_src

*** Theme
#+begin_src emacs-lisp
  (use-package ample-theme
    :init (load-theme `ample-flat t))
#+end_src

*** Mode Line
Using an alternative mode line called "moodline".  Its more inline with doom-modeline, and vscodes mode
line without being over the top like powerline.
#+begin_src emacs-lisp
   (use-package mood-line
    :config (mood-line-mode)
    :custom (setq mood-line-glyph-alist mood-line-glyphs-unicode
		  mood-line-format mood-line-format-default-extended))
#+end_src

*** Filetree browser
While not being a "proper" feature of a text based editor, when working on larger projects, and especially
ansible, a file tree browser is a very effective part of my workflow. Consistently switching to a dired buffer
is just a pain in the ass.
#+begin_src emacs-lisp
    (use-package treemacs
    :hook (after-init . treemacs)
    :bind (:map global-map
		("M-0"       . treemacs-select-window)
		("C-x t 1"   . treemacs-delete-other-windows)
		("C-x t t"   . treemacs)
		("C-x t d"   . treemacs-select-directory)
		("C-x t B"   . treemacs-bookmark)
		("C-x t C-t" . treemacs-find-file)
		("C-x t M-t" . treemacs-find-tag))
    :config (setq treemacs-follow-after-init t
		  treemacs-is-never-other-window t
		  treemacs-width 20)

    (treemacs-follow-mode t)
    (treemacs-filewatch-mode t)
    (treemacs-git-mode 'simple)
    (treemacs-fringe-indicator-mode t)
    (when treemacs-python-executable
      (treemacs-git-commit-diff-mode t)))

  ; Adds treemacs icons to dired buffers
  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once))

  ; Git integration
  (use-package treemacs-magit
    :after (treemacs magit))
#+end_src

** Language specific configuration
Automatically guess the major mode for a language
#+begin_src emacs-lisp
(setq-default major-mode
              (lambda () ; guess major mode from file name
                (unless buffer-file-name
                  (let ((buffer-file-name (buffer-name)))
                    (set-auto-mode)))))
#+end_src

*** LSP Support
A number of languages provide language servers that can perform much more
advanced code completion and IDE-like functions that are language agnostic.
The majority of languages I use have well established major modes, however it is
usefull for things that don't have well baked support, ex: ansible.

#+begin_src emacs-lisp
(use-package eglot)
#+end_src

*** Markdown
**** TODO Configure markdown mode

#+begin_src emacs-lisp
 (use-package markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "pandoc"))
#+end_src

*** PDFs
Using pdf-tools to provide a more functional pdf viewer, with the downside of
nrequired packages on the system to compile the viewer.
#+begin_src emacs-lisp
(use-package pdf-tools
  :config (pdf-tools-install)
  :hook (pdf-view-mode . auto-revert-mode))
#+end_src

*** YAML
#+begin_src emacs-lisp
  (use-package yaml-mode
  :mode ("\\.yml\\'" . yaml-mode)
  :mode ("\\.yaml\\'" . yaml-mode))
#+end_src

*** Mermaid
Useful for diagrams
#+begin_src emacs-lisp
(use-package mermaid-mode)
#+end_src


